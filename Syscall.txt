Syscall (contraction for system call) are a way for a process to interact with the operating system.
Arguments of a syscall are provided on the stack and the type of syscall is specified like so:
    
    push <arg1>;
    push <arg2>;
    ...
    syscall <type>;
    pull <ret1>;
    pull <ret2>;
    ...
    
And here how such a call is defined:

<type> -> <name>
    <function>
    arguments: <arg1>, <arg2>, ...
    returns  : <ret1>, <ret2>, ...

(this is psudo code, in baabnq you'd have to do this: "asm 'syscall <type>';")

--- system  ---
0x0000 -> noop
    do basically nothing
    no arguments, no returns


Streams are constructs used for data exchange with a process and thus managed by the operating system.
Opend streams are referenceable, by the process, through ids that are assigned at opening.
Each stream also contains a buffer for input and output.
Note that stream id 0x0 generally mean that the stream could not be opened.
Then calling a syscall with stream id 0x0, the syscall will just do nothing and return subsequent errors.
--- streams ---
0x0001 -> close stream
    closes stream, provided the id
    arguments: id, writeback (0 -> no, 1 -> yes)
    returns  : success (0 -> error, 1 -> success)
    
0x0002 -> read stream
    reads from input buffer of stream
    arguments: id
    returns  : success (0 -> error, 1 -> success, 2 -> stream empty), data
    
0x0003 -> write stream
    writes to output buffer of stream
    arguments: id, data
    returns  : success (0 -> error, 1 -> success)

0x0004 -> stream information
    gets type of stream
    arguments: id
    returns  :  type (0 -> unknown, 1 -> file, 2 -> directory, 3 -> socket),
                input content size (output is practically infinite)
                

file stuff
--- files ---
0x0010 -> open object in file system
    opens object in file system as stream give it's path
    arguments: path pointer (pointer to char array)
    returns  : id

!0x0011 -> create object (object always has priority n-1 where n is the priority of the process calling the syscall)
    create file object given it's path and type
    arguments: path pointer, type (0 -> invaild, 1 -> file, 2 -> dir)
    returns  : success (0 -> error, 1 -> success, 2 -> object already exists)
    
!0x0012 -> delete object
    deletes file object given it's path
    arguments: path pointer
    returns  : sucess (0 -> error (insufficient permission), 1 -> success, 2 -> object not existent)
        
--- time ---
0x0020 -> napMs
    pulls the process out of the execution pool for n ms
    arguments: time (time to sleep in ms)
    returns  :

!0x0021 -> napS
    pulls the process out of the execution pool for n secs
    arguments: time (time to sleep in secs)
    returns  :    

!0x0022 -> unix epoch
    returns unix epoch (64-bit) in 4 segments
    arguments: 
    returns  :  segment 1 (containing lsb)
                segment 2
                segment 3
                segment 4 (containing msb)
    
0x0023 -> formatted local time
    returns local time in (years, months, days, hours, mins, secs)
    arguments:
    returns  :  secs
                mins
                hours
                wdays (week)
                mdays (month)
                ydays (year)
                months
                years
                
--- network ---
0x0030 -> bind to port
    binds process to port for networking (ik crazy right)
    arguments: port, queue size (number connections able to pend at a given time)
    returns  : sucess (0 -> error, 1 -> success)
    
0x0031 -> accept pending connection
    arguments: 
    returns  : id (stream for sending data over the socket)
	           ip low  (---.---.???.???) (!!! ip is in reverse: e.g. localhost => 1.0.0.127)
			   ip high (???.???.---.---)
    
--- process ---
0x0040 -> get pid
    quarry the pid of the process calling
    arguments:
    returns  : pid

!0x0041 -> launch process
    launches new process given a source path
    arguments: path pointer
    returns  : success (0 -> error, 1 -> success)
    
!0x0042 -> kill process
    sends kill signal to process
    arguments: pid
    returns  : sucess (0 -> error, 1 -> success)

!0x0043 -> process meta
    get metadata about process
    arguments: pid
    returns  : <not implemented yet>

0x0044 -> fork process
    create exacte (except networking) copy of caller process
    arguments:
    returns  : pid of process respectily

!0x0045 -> get all pids
    get pids of all currently running processes
    arguments: pid
    returns  : <not implemented yet>

--- threading ---
0x0050 -> map memory
	maps file into memory, mapping persists for lifetime of process
	arguments: path pointer
	           address (addr to load file to, in process memory)
			   offset  (offset into file to start loading from)
	returns  : success (0 -> error, 1 -> success)

0x0051 -> tsl (test and set lock)
	copies value and sets, atomically
	arguments: ptr (pointer to lock memory)
	returns  : value (copied value)


